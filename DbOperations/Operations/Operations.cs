using DbObjects;
using DbOperations.ResponseObject;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Net.Sockets;
using System.Text;
using System.Threading.Tasks;

namespace DBOperations.Operations
{
    /// <summary>
    /// This Layer is basically intermediary in between WCF Service and Database
    /// All business operations, taking place over database will be written here
    /// All data manipulations, type changes, DTO will be written here
    /// </summary>
    public class Operations : IDisposable
    {
        public ResponseObject<User> CreateUser(User user)
        {
            ResponseObject<User> response = new ResponseObject<User>();
            try
			{
                //Memory management
				using (var context = new TicketEntities())
				{
                    //Adding user object in Users Model of DB Context of Entity Framework
                    context.Users.Add(user);
                    //Calling Save method of Entity Framework to persist new record in Database
                    int affectedRows = context.SaveChanges();
                    //If insert operation is successful then we check how many rows are affected by this, in this case it should always be "1" for success and 0 for failure
                    if (affectedRows > 0)
                    {
                        //return User object with AutoIncremented value of User_Id field (generated by SQL server) with Result Code "Success"
                        response.SetResponeData(user, ResultCode.Success, string.Empty);
                    }
                }
			}
			catch (Exception ex)
			{
                response.SetResponeData(user, ResultCode.Error, ex.Message);
                return response;
			}

			return response;
        }

        public ResponseObject<Route> AddRoute(Route route)
        {
            ResponseObject<Route> response = new ResponseObject<Route>();
            try
            {
                //Memory management
                using (var context = new TicketEntities())
                {
                    //Adding route object in Routes Model of DB Context of Entity Framework
                    context.Routes.Add(route);
                    //Calling Save method of Entity Framework to persist new record in Database
                    int affectedRows = context.SaveChanges();
                    //If insert operation is successful then we check how many rows are affected by this, in this case it should always be "1" for success and 0 for failure
                    if (affectedRows > 0)
                    {
                        //return User object with AutoIncremented value of User_Id field (generated by SQL server) with Result Code "Success"
                        response.SetResponeData(route, ResultCode.Success, string.Empty);
                    }
                }
            }
            catch (Exception ex)
            {
                response.SetResponeData(route, ResultCode.Error, ex.Message);
                return response;

            }

            return response;
        }

        public ResponseObject<Ticket> GenerateTicket(Ticket ticket)
        {
            ResponseObject<Ticket> response = new ResponseObject<Ticket>();
            try
            {
                //Memory management
                using (var context = new TicketEntities())
                {
                    //Adding tickets object in Tickets Model of DB Context of Entity Framework
                    context.Tickets.Add(ticket);
                    //Calling Save method of Entity Framework to persist new record in Database
                    int affectedRows = context.SaveChanges();
                    //If insert operation is successful then we check how many rows are affected by this, in this case it should always be "1" for success and 0 for failure                    
                    if (affectedRows > 0)
                    {
                        //return User object with AutoIncremented value of User_Id field (generated by SQL server) with Result Code "Success"
                        response.SetResponeData(ticket, ResultCode.Error, string.Empty);
                    }
                        
                }
            }
            catch (Exception ex)
            {
                response.SetResponeData(ticket, ResultCode.Success, ex.Message);
                return response;
            }

            return response;
        }

        /// <summary>
        /// Mempry management block
        /// Whenever Object if this class is being disposed/destroyed this method is called
        /// Example Implementation is inside "using" block
        /// </summary>
        public void Dispose()
        {
            GC.SuppressFinalize(this);
        }

        public List<User> GetUsers()
        {
            List<User> users;
            try
            {
                //Memory management
                using (var context = new TicketEntities())
                {
                    //Calling EF to fecth all the rows in Users table
                    users = context.Users.ToList();
                    return users;
                }
            }
            catch (Exception ex)
            {
                return null;   
            }

            
        }

        public List<Route> GetRoutes()
        {
            List<Route> routes;
            try
            {
                //Memory management
                using (var context = new TicketEntities())
                {
                    //Calling EF to fecth all the rows in Routes table
                    routes = context.Routes.ToList();
                    return routes;
                }
            }
            catch (Exception ex)
            {
                return null;
            }


        }

        public List<Ticket> GetTickets()
        {
            List<Ticket> tickets;
            try
            {
                //Memory management
                using (var context = new TicketEntities())
                {
                    //Calling EF to fecth all the rows in Ticket table
                    tickets = context.Tickets.ToList();
                    return tickets;
                }
            }
            catch (Exception ex)
            {
                return null;
            }


        }
    }
}
